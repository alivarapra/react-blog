{"pageContext":{"isCreatedByStatefulCreatePages":false,"post":{"slug":"/operatingSystemsBasicNotes/","title":"Operating System Basic Notes","subtitle":"Be a stupid learner","author":"sabertazimi","tags":["Computer Science","Operating System"],"date":"2017-03-05T00:00:00.000Z","excerpt":"Operating System Basic Notes 操作系统是一个大型的程序系统, 它负责(处理机管理, 存储管理, 设备管理, 文件系统): 计算机系统软、硬件资源的分配和使用 控制和协调并发活动 提供用户接口, 使用户获得良好的工作环境 GCC 内联汇编 constraints: m/v/o = memory r = register Q = ea/b/c/dx a = eax b = ebx c = ecx d = edx D = edi S = esi 0/n = fisrt/nth constraints…","timeToRead":35,"html":"<h1 id=\"operating-system-basic-notes\"><a href=\"#operating-system-basic-notes\" aria-label=\"operating system basic notes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operating System Basic Notes</h1>\n<p>操作系统是一个大型的程序系统, 它负责(处理机管理, 存储管理, 设备管理, 文件系统):</p>\n<ul>\n<li>计算机系统软、硬件资源的分配和使用</li>\n<li>控制和协调并发活动</li>\n<li>提供用户接口, 使用户获得良好的工作环境</li>\n</ul>\n<h2 id=\"gcc-内联汇编\"><a href=\"#gcc-%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96\" aria-label=\"gcc 内联汇编 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCC 内联汇编</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token keyword\">asm</span> <span class=\"token punctuation\">(</span> assembler template\t<span class=\"token comment\">// assembly language</span>\n\t<span class=\"token punctuation\">:</span><span class=\"token operator\">=</span>output operands\t\t<span class=\"token comment\">// 约定输出</span>\n\t<span class=\"token punctuation\">:</span>input operands\t\t\t<span class=\"token comment\">// 约定输入</span>\n\t<span class=\"token punctuation\">:</span>clobbers\t\t\t\t<span class=\"token comment\">// 约定插入</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>constraints:</p>\n<ul>\n<li>m/v/o = memory</li>\n<li>r = register</li>\n<li>Q = ea/b/c/dx</li>\n<li>a = eax</li>\n<li>b = ebx</li>\n<li>c = ecx</li>\n<li>d = edx</li>\n<li>D = edi</li>\n<li>S = esi</li>\n<li>0/n = fisrt/nth constraints</li>\n</ul>\n<h2 id=\"基本概念\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\" aria-label=\"基本概念 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本概念</h2>\n<h3 id=\"操作系统的特性\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E6%80%A7\" aria-label=\"操作系统的特性 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作系统的特性</h3>\n<ul>\n<li>并发性  : 能处理多个同时性活动的能力</li>\n<li>共享性  : 多个计算任务对系统资源的共同享用</li>\n<li>不确定性: 操作系统能处理随机发生的多个事件 - 程序运行次序的不确定性, 程序运行时间的不确定性</li>\n</ul>\n<h3 id=\"操作系统的资源管理功能\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD\" aria-label=\"操作系统的资源管理功能 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作系统的资源管理功能</h3>\n<h4 id=\"处理机调度\"><a href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6\" aria-label=\"处理机调度 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>处理机调度</h4>\n<ul>\n<li>确定进程调度策略</li>\n<li>给出进程调度算法</li>\n<li>进行处理机的分派</li>\n</ul>\n<h4 id=\"存储器管理\"><a href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86\" aria-label=\"存储器管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存储器管理</h4>\n<ul>\n<li>存储分配与存储无关性</li>\n</ul>\n<p>为用户提供逻辑地址, 解决主存分配问题</p>\n<ul>\n<li>存储保护</li>\n</ul>\n<p>实现系统程序与用户程序之间的隔离, 实现不同用户程序之间的隔离</p>\n<ul>\n<li>存储扩充</li>\n</ul>\n<p>虚拟内存管理: 主存+磁盘, 为每个进程管理一个虚拟内存映射链表</p>\n<h4 id=\"设备管理\"><a href=\"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86\" aria-label=\"设备管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设备管理</h4>\n<ul>\n<li>设备无关性</li>\n</ul>\n<p>用户向系统申请和使用的设备无关实际操作的设备, 操作系统为用户提供统一的逻辑设备(名)</p>\n<ul>\n<li>设备分配(独享分配/共享分配/虚拟分配)</li>\n<li>设备的传输控制(设备启动处理, 设备中断处理, 设备结束处理)</li>\n</ul>\n<p>组织设备完成 I/O 操作, 并正确处理中断</p>\n<h4 id=\"文件系统\"><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"文件系统 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件系统</h4>\n<p>为用户提供一种简便、统一的存取和管理信息的方法, 解决信息的共享/数据的存取控制/数据的保密等问题:</p>\n<ul>\n<li>实现用户的信息组织</li>\n<li>提供存取方法</li>\n<li>实现文件共享</li>\n<li>保证文件安全</li>\n<li>保证文件完整性</li>\n<li>完成磁盘空间分配</li>\n</ul>\n<h3 id=\"操作系统的演变\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E5%8F%98\" aria-label=\"操作系统的演变 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作系统的演变</h3>\n<ul>\n<li>单用户系统(45-55) -> 批处理系统(55-65) -> 多道系统(65-80) -> 分时系统(70-) -> 分布式系统</li>\n<li>手工系统 -人机矛盾-> 联机批处理系统 -CPU I/O 矛盾-> 脱机批处理系统 -响应能力-> 执行系统(中断/通道) -并行-> 多道批处理系统(粗粒度) -> 分时系统(细粒度) -> 实时系统 -> 个人/网络/分布式系统</li>\n</ul>\n<h4 id=\"批处理系统\"><a href=\"#%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F\" aria-label=\"批处理系统 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>批处理系统</h4>\n<p>作业成批送入计算机, 然后由作业调度程序自动选择作业, 在系统内(多道)运行</p>\n<ul>\n<li>系统吞吐率高: 脱机/多道运行</li>\n<li>作业周转时间长, 用户使用不方便, <strong>缺少交互性</strong></li>\n</ul>\n<h4 id=\"分时系统\"><a href=\"#%E5%88%86%E6%97%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"分时系统 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分时系统</h4>\n<p>采用时间片(time slice)轮转(round robin)的方法, 使计算机同时为多个终端用户服务, 保证对每个用户都有足够快的响应时间, 并提供交互会话功能</p>\n<ul>\n<li>并行性</li>\n<li>独占性</li>\n<li>交互性</li>\n</ul>\n<p>单处理器系统: 处理器与设备/处理器与通道/通道与通道/设备与设备可以同时刻<strong>并行</strong>(真正意义上的同时进行)</p>\n<h4 id=\"实时系统\"><a href=\"#%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"实时系统 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实时系统</h4>\n<p>实时系统对外部输入的信息, 能够在规定时间内处理完毕并作出反应(实时控制/实时信息处理) e.g 嵌入式操作系统</p>\n<ul>\n<li>可靠性</li>\n<li>安全性</li>\n<li>及时响应</li>\n</ul>\n<h3 id=\"操作系统虚拟机\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA\" aria-label=\"操作系统虚拟机 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作系统虚拟机</h3>\n<ul>\n<li>在裸机上配置了操作系统后便构成了操作系统虚拟机</li>\n<li>裸机的指令系统: 机器指令; 操作系统虚拟机的指令系统: 系统调用</li>\n</ul>\n<h4 id=\"用户接口\"><a href=\"#%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3\" aria-label=\"用户接口 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用户接口</h4>\n<ul>\n<li>操作/命令接口(操作命令): 作业控制语言/键盘命令(CLI)/图形化用户界面(GUI)</li>\n<li>程序接口(系统功能调用):  在用户程序中可以直接使用系统功能调用(system call)请求操作系统提供的服务</li>\n</ul>\n<h3 id=\"操作系统的组织结构\"><a href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84\" aria-label=\"操作系统的组织结构 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>操作系统的组织结构</h3>\n<ul>\n<li>一体化结构</li>\n<li>模块化结构</li>\n<li>可扩展内核(微内核)结构</li>\n<li>层次化结构</li>\n</ul>\n<h3 id=\"并发concurrent\"><a href=\"#%E5%B9%B6%E5%8F%91concurrent\" aria-label=\"并发concurrent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>并发(Concurrent)</h3>\n<h4 id=\"程序并发的特点\"><a href=\"#%E7%A8%8B%E5%BA%8F%E5%B9%B6%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9\" aria-label=\"程序并发的特点 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程序并发的特点</h4>\n<ul>\n<li>程序执行的间断性</li>\n<li>相互通信的可能性</li>\n<li>资源分配的动态性</li>\n</ul>\n<h2 id=\"启动\"><a href=\"#%E5%90%AF%E5%8A%A8\" aria-label=\"启动 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启动</h2>\n<h3 id=\"bios\"><a href=\"#bios\" aria-label=\"bios permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BIOS</h3>\n<ul>\n<li>基本输入输出程序</li>\n<li>系统设置信息</li>\n<li>开机后自检程序</li>\n<li>系统自启动程序</li>\n</ul>\n<h3 id=\"启动顺序\"><a href=\"#%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F\" aria-label=\"启动顺序 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启动顺序</h3>\n<h4 id=\"寄存器\"><a href=\"#%E5%AF%84%E5%AD%98%E5%99%A8\" aria-label=\"寄存器 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>寄存器</h4>\n<ul>\n<li>CF: 初值 F000H</li>\n<li>EIP: 初值 FFF0H</li>\n</ul>\n<p>(FFF)F0000H+FFF0H = FFFFFFF0H, BIOS 的 EPROM(Erasable Programmable Read Only Memory) 处\n加电后第一条指令一般是 ljmp(实模式下, 内存 !MB), 跳转地址为 CF&#x3C;&#x3C;4+EIP, 跳转至 BIOS 例行程序起始点.</p>\n<h4 id=\"bios-1\"><a href=\"#bios-1\" aria-label=\"bios 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BIOS</h4>\n<p>BIOS 根据设置(硬盘/U盘/网络启动), 加载存储设备的主引导扇区(Master Boot Record)(第一个扇区)的 512 字节至内存 0x7c00 处, 开始执行第一条指令(bootloader)</p>\n<h4 id=\"bootloader\"><a href=\"#bootloader\" aria-label=\"bootloader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bootloader</h4>\n<p>实模式与保护模式带来的问题:</p>\n<ul>\n<li>在实模式的寻址模式中, 令物理地址为 16 位段寄存器左移 4 位加 16 位逻辑地址的偏移所得的 20 位地址</li>\n<li>若要访问 1MB 之后的内存, 则必须开启 A20 Line 开关(关闭 wrap around), 将 32 位地址总线打开, 并进入保护模式(Protect Mode)</li>\n<li>在实模式中, 0~4KB 为中断向量表保留, 640KB ~ 1MB 为显存与 BIOS 保留, 实际可用的内存只有 636KB</li>\n<li>考虑到日后内核镜像的体积有超过 1MB 的可能, 所以将其装载到物理地址 1MB(0x100000) 之后连续的一块内存中更好.</li>\n<li>若要装载内核到物理地址 1MB之后(实模式下无法访问), 可在实模式中暂时将其装载到一个临时位置, 待进入保护模式之后再移动至合适位置</li>\n</ul>\n<p>解决方案:</p>\n<ul>\n<li>将内核镜像装入内存临时地址</li>\n<li>开启保护模式</li>\n<li>移动内核镜像至 1MB 之后合适位置</li>\n<li>跳转至内核入口(<code class=\"language language-text\">jmp addr</code> 用以修改 cs:eip)</li>\n</ul>\n<h5 id=\"标志lab1toolssignc\"><a href=\"#%E6%A0%87%E5%BF%97lab1toolssignc\" aria-label=\"标志lab1toolssignc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>标志(lab1/tools/sign.c)</h5>\n<ul>\n<li>有效字节小于 510 bytes</li>\n<li>结尾为 0x55aa</li>\n<li>总计字节小于 512 bytes</li>\n</ul>\n<h5 id=\"基本功能\"><a href=\"#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\" aria-label=\"基本功能 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本功能</h5>\n<h6 id=\"切换到保护模式-启动段机制\"><a href=\"#%E5%88%87%E6%8D%A2%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E5%90%AF%E5%8A%A8%E6%AE%B5%E6%9C%BA%E5%88%B6\" aria-label=\"切换到保护模式 启动段机制 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>切换到保护模式, 启动段机制</h6>\n<ul>\n<li>通过 8042 键盘控制器的端口, 开启 A20, 关闭 memory wrap around, 获取足够内存空间</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"asm\"><pre class=\"language language-asm\"><code class=\"language language-asm\">; 键盘控制器的命令\n; 0xD0 Read Output Port\n; 0xD1 Write Output Port\n; 0xDD Enable A20 Address Line\n; 0xDF Disable A20 Address Line\n; 0x60 - 数据端口, 0x64 - 命令端口\ncall  empty_8042\nmov   al,0xd1\nout   0x64,al\ncall  empty_8042\nmov   al,0xdf\nout   0x60,al\ncall  empty_8042\n\nempty_8042:\n    dw    00ebh, 00ebh\n    in    al,64h\n    test  al,2\n    jnz   empty_8042\n    ret</code></pre></div>\n<ul>\n<li>置 cr0 保护模式标志位(bit0) 为1</li>\n<li>加载全局描述符表</li>\n<li>设置各个通用寄存器与段寄存器</li>\n</ul>\n<h6 id=\"从硬盘上加载-某种kernel-in-elf-格式的-os-kernel在硬盘中紧邻-mbr-至内存的固定区域\"><a href=\"#%E4%BB%8E%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%8A%A0%E8%BD%BD-%E6%9F%90%E7%A7%8Dkernel-in-elf-%E6%A0%BC%E5%BC%8F%E7%9A%84-os-kernel%E5%9C%A8%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%B4%A7%E9%82%BB-mbr-%E8%87%B3%E5%86%85%E5%AD%98%E7%9A%84%E5%9B%BA%E5%AE%9A%E5%8C%BA%E5%9F%9F\" aria-label=\"从硬盘上加载 某种kernel in elf 格式的 os kernel在硬盘中紧邻 mbr 至内存的固定区域 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>从硬盘上加载 某种(kernel in ELF) 格式的 os kernel(在硬盘中紧邻 MBR) 至内存的固定区域</h6>\n<h6 id=\"跳转到-os-kernel-的入口点entry-point-转移控制权至-os\"><a href=\"#%E8%B7%B3%E8%BD%AC%E5%88%B0-os-kernel-%E7%9A%84%E5%85%A5%E5%8F%A3%E7%82%B9entry-point-%E8%BD%AC%E7%A7%BB%E6%8E%A7%E5%88%B6%E6%9D%83%E8%87%B3-os\" aria-label=\"跳转到 os kernel 的入口点entry point 转移控制权至 os permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>跳转到 os kernel 的入口点(entry point), 转移控制权至 os</h6>\n<h5 id=\"保护模式与段机制\"><a href=\"#%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%AE%B5%E6%9C%BA%E5%88%B6\" aria-label=\"保护模式与段机制 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>保护模式与段机制</h5>\n<ul>\n<li>CS -> 全局描述符表(其起始地址与表大小位于 gdt 寄存器中)某项(每项存有 base/limit 等信息) -> 局部描述符表 -> 段选择子(段的基本信息) -> 基址+EIP -> 线性地址 —页机制—> 物理地址</li>\n<li>将 cr0 寄存器 bit0 置为1, 表示进入了保护模式, 段机制开始起作用</li>\n</ul>\n<h2 id=\"物理内存管理\"><a href=\"#%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\" aria-label=\"物理内存管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>物理内存管理</h2>\n<h3 id=\"bootloader-探测机器内存分布\"><a href=\"#bootloader-%E6%8E%A2%E6%B5%8B%E6%9C%BA%E5%99%A8%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83\" aria-label=\"bootloader 探测机器内存分布 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bootloader 探测机器内存分布</h3>\n<p>为内存管理模块提供基础: 在进入实模式前, 调用int 15h(88h, e801h, e820h), 借助 BIOS 中断获取内存信息</p>\n<h3 id=\"基本概念-1\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1\" aria-label=\"基本概念 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本概念</h3>\n<h4 id=\"基本目标\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9B%AE%E6%A0%87\" aria-label=\"基本目标 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本目标</h4>\n<ul>\n<li>抽象: 逻辑地址空间(线性物理地址映射)</li>\n<li>保护: 独立地址空间(进程间互不影响)</li>\n<li>共享: 访问相同内存(内核空间与共享库)</li>\n<li>虚拟化: 独占内存空间假象</li>\n</ul>\n<h4 id=\"基本管理方式\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\" aria-label=\"基本管理方式 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本管理方式</h4>\n<ul>\n<li>重定位(relocation)</li>\n<li>分段(segmentation): 代码段/数据段</li>\n<li>分页(paging)</li>\n<li>虚拟存储(virtual memory): 内存视作硬盘的缓存, 硬盘视作虚拟内存</li>\n</ul>\n<h4 id=\"地址生成\"><a href=\"#%E5%9C%B0%E5%9D%80%E7%94%9F%E6%88%90\" aria-label=\"地址生成 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地址生成</h4>\n<h5 id=\"地址生成时机\"><a href=\"#%E5%9C%B0%E5%9D%80%E7%94%9F%E6%88%90%E6%97%B6%E6%9C%BA\" aria-label=\"地址生成时机 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地址生成时机</h5>\n<ul>\n<li>编译时</li>\n<li>链接时</li>\n<li>加载时</li>\n<li>执行时(相对寻址)</li>\n</ul>\n<h4 id=\"地址映射软硬件结合\"><a href=\"#%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%BB%93%E5%90%88\" aria-label=\"地址映射软硬件结合 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地址映射(软硬件结合)</h4>\n<p>逻辑地址 —> 物理地址</p>\n<ul>\n<li>硬件(CPU/MMU)完成映射地址</li>\n<li>操作系统建立映射规则(页表)</li>\n</ul>\n<h4 id=\"地址检查软硬件结合\"><a href=\"#%E5%9C%B0%E5%9D%80%E6%A3%80%E6%9F%A5%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%BB%93%E5%90%88\" aria-label=\"地址检查软硬件结合 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地址检查(软硬件结合)</h4>\n<ul>\n<li>操作系统设置的段机制和段长度</li>\n<li>硬件(CPU/MMU)根据段信息进行地址检查(内存访问是否异常)</li>\n</ul>\n<h3 id=\"连续内存分配mallocfree\"><a href=\"#%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8Dmallocfree\" aria-label=\"连续内存分配mallocfree permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>连续内存分配(malloc/free)</h3>\n<h4 id=\"内存碎片\"><a href=\"#%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87\" aria-label=\"内存碎片 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存碎片</h4>\n<ul>\n<li>外部碎片: 已分配单元间无法利用空闲单元(请求内存单元过大)</li>\n<li>内部碎片: 已分配单元内空闲单元</li>\n</ul>\n<h4 id=\"动态分配策略\"><a href=\"#%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\" aria-label=\"动态分配策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动态分配策略</h4>\n<ul>\n<li>Fist-fit(最先匹配): 使用第一个可利用空闲块 - 容易产生外部碎片, 分配大块效率低</li>\n<li>Best-fit(最佳匹配): 使用利用度最高的空闲块 - 外部碎片过小, 释放时需重新排列空闲块链表(升序)</li>\n<li>Worst-fit(最差匹配): 使用利用度最差的空闲块 - 分配中块效率高, 释放时需重新排列空闲块链表(降序)</li>\n</ul>\n<h4 id=\"碎片整理策略\"><a href=\"#%E7%A2%8E%E7%89%87%E6%95%B4%E7%90%86%E7%AD%96%E7%95%A5\" aria-label=\"碎片整理策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>碎片整理策略</h4>\n<h4 id=\"ucore-实现\"><a href=\"#ucore-%E5%AE%9E%E7%8E%B0\" aria-label=\"ucore 实现 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ucore 实现</h4>\n<ul>\n<li>连续存放 n 个 page 结构, 形式表示内存页, 并在连续内存块的首页(header page)保存此连续块的连续页数目</li>\n<li>维护一个链表, 链表每项为大块连续内存块的起始页(header page address) 和 连续页数目, 管理分散的连续内存块</li>\n</ul>\n<h5 id=\"紧凑compaction\"><a href=\"#%E7%B4%A7%E5%87%91compaction\" aria-label=\"紧凑compaction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>紧凑(compaction)</h5>\n<p>将不同进程占用内存单元移至较为集中的地方:</p>\n<ul>\n<li>只可移动 可动态重定位程序</li>\n<li>只可移动 等待状态进程</li>\n</ul>\n<h5 id=\"分区对换swapping-inout\"><a href=\"#%E5%88%86%E5%8C%BA%E5%AF%B9%E6%8D%A2swapping-inout\" aria-label=\"分区对换swapping inout permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分区对换(swapping in/out)</h5>\n<p>将等待状态进程的分区对换至外存,以增大可用内存单元</p>\n<blockquote>\n<p>e.g Linux Swap 分区: 安装系统时一般切割大小为内存大小的50%~100% 的外存作为 Swao 分区</p>\n</blockquote>\n<h4 id=\"malloc-实现策略\"><a href=\"#malloc-%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5\" aria-label=\"malloc 实现策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>malloc 实现策略</h4>\n<h5 id=\"启发式heuristic编程\"><a href=\"#%E5%90%AF%E5%8F%91%E5%BC%8Fheuristic%E7%BC%96%E7%A8%8B\" aria-label=\"启发式heuristic编程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启发式(Heuristic)编程</h5>\n<ul>\n<li>建立已分配void指针表,free函数执行时,只回收表中存在的指针;不存在则报错</li>\n<li>对heap进行分区 - 小/中/大块内存请求,分别从不同区域(8/16/32最小单位区)分配</li>\n<li>记录当前堆块的信息，如长度，空闲状态</li>\n<li>记录周围环境信息，如保留上/下一堆块的指针或记录上/下堆块空闲状态</li>\n</ul>\n<h5 id=\"伙伴系统buddy-system\"><a href=\"#%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9Fbuddy-system\" aria-label=\"伙伴系统buddy system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>伙伴系统(Buddy System)</h5>\n<ul>\n<li>可分配内存单元总大小为 2^n</li>\n<li>总是将大小 <strong>小于</strong>请求大小的<strong>2倍</strong>且为<strong>2的幂次方</strong> 的某块内存单元分配出去(大小为 2^(i-1))</li>\n</ul>\n<h6 id=\"合并空闲块\"><a href=\"#%E5%90%88%E5%B9%B6%E7%A9%BA%E9%97%B2%E5%9D%97\" aria-label=\"合并空闲块 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>合并空闲块</h6>\n<ul>\n<li>空闲块相邻</li>\n<li>空闲块等大</li>\n<li>低地址空闲块的 起始地址 必须为 空闲块大小 的 2的幂次方倍(2倍以上)</li>\n</ul>\n<h3 id=\"非连续内存分配\"><a href=\"#%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\" aria-label=\"非连续内存分配 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>非连续内存分配</h3>\n<ul>\n<li>支持一个程序使用非连续的物理地址空间</li>\n<li>支持共享代码与数据</li>\n<li>支持动态加载与动态链接</li>\n</ul>\n<h4 id=\"段式存储管理\"><a href=\"#%E6%AE%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\" aria-label=\"段式存储管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>段式存储管理</h4>\n<p>将逻辑地址划分, 低位表示段内偏移, 高位(取摸)表示段号(类比缓存中的内存地址)</p>\n<h5 id=\"gdt\"><a href=\"#gdt\" aria-label=\"gdt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GDT</h5>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> gdt_ptr <span class=\"token punctuation\">{</span>\n    uint16_t gdt_limit<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// gdt_length - 1</span>\n    uint32_t gdt_base<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>packed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> gdt_ptr_t<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>用 16 位来表示表的长度(2 ^ 16 = 65532 bytes), 除以每一个描述符的 8 字节, 最多能创建8192个描述符</li>\n</ul>\n<h4 id=\"页式存储管理\"><a href=\"#%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\" aria-label=\"页式存储管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页式存储管理</h4>\n<p>开启页机制:</p>\n<ul>\n<li>init page directory(首址位于 cr3 寄存器), page table</li>\n<li>update GDT</li>\n<li>update ds,es,ss</li>\n<li>update cs with jmp instruction</li>\n<li>cr0 寄存器 bit31(most bit) 置1</li>\n</ul>\n<h5 id=\"虚拟地址\"><a href=\"#%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80\" aria-label=\"虚拟地址 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟地址</h5>\n<blockquote>\n<p>TLB(translation lookaside buffer in cpu/pm)</p>\n</blockquote>\n<ul>\n<li>Virtual Address = 2^(bits of virtual page offset) * virtual page number + virtual page offset</li>\n<li>VPN(virtual page number point to PPN) - VPO(virtual page offset = PPO)</li>\n<li>根据 VPN 在页表中找到对应表项(VPN 表示项号), 每项保存着 PPN</li>\n<li>TLBT(tag) - TLBI(index) - VPO</li>\n<li>因为内存局部性原理, TLB 一般只需要很小(比如 <strong>64 项</strong>)即可达到不错的效果</li>\n</ul>\n<h5 id=\"物理地址\"><a href=\"#%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80\" aria-label=\"物理地址 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>物理地址</h5>\n<blockquote>\n<p>C(cache) PPO = VPO</p>\n</blockquote>\n<ul>\n<li>Page Frame(帧): 高位为帧号, 低位为偏移</li>\n<li>Physical Address = 2^(bits of physical page offset) * physical page number/page frame number + physical page offset</li>\n<li>PPN(physical page number) - PPO(physical page offset = VPO)</li>\n<li>CT(tag) - CI(index) - CO(offset)</li>\n</ul>\n<h5 id=\"页表\"><a href=\"#%E9%A1%B5%E8%A1%A8\" aria-label=\"页表 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页表</h5>\n<ul>\n<li>页表由操作系统建立, 硬件(CPU/MMU)根据页表信息将虚拟地址映射为物理地址</li>\n</ul>\n<h6 id=\"页表结构\"><a href=\"#%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84\" aria-label=\"页表结构 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页表结构</h6>\n<ul>\n<li>FN/PPN</li>\n<li>标志位: resident bit(存在位)/dirty bit(修改位)/reference(clock) bit(引用位)</li>\n</ul>\n<h5 id=\"性能问题\"><a href=\"#%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\" aria-label=\"性能问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>性能问题</h5>\n<ul>\n<li>两次访存: 第一次获取页表项, 第二次访问实际数据</li>\n<li>页表占据大量内存单元</li>\n</ul>\n<h6 id=\"tlbtranslation-lookaside-buffer\"><a href=\"#tlbtranslation-lookaside-buffer\" aria-label=\"tlbtranslation lookaside buffer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TLB(translation lookaside buffer)</h6>\n<p>缓存页表项 - key: VPN, value: PPN　不用访问页表</p>\n<h6 id=\"多级页表\"><a href=\"#%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\" aria-label=\"多级页表 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多级页表</h6>\n<ul>\n<li>切割页表: 建立子页表</li>\n<li>Page Directory -> Page Table -> Physical Address</li>\n<li>将线性地址分成三部分 Directory+Table+Offset: cr3+Dir 取出 page table base, ptb+Tab 取出 physical address base, pab+offset = pa</li>\n</ul>\n<blockquote>\n<p>CR3 寄存器: 保存一级页表的基址</p>\n</blockquote>\n<ul>\n<li>父页表表项保存子页表起始地址, 逻辑地址某部分保存偏移地址(子表项号)</li>\n<li>存在位为 0 时, 不用保存子表, 节省内存单元</li>\n</ul>\n<h6 id=\"反置页表\"><a href=\"#%E5%8F%8D%E7%BD%AE%E9%A1%B5%E8%A1%A8\" aria-label=\"反置页表 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>反置页表</h6>\n<ul>\n<li>PPN 作为页表索引, 页表项保存 VPN(或者 Hash(VPN|PID))</li>\n<li>将 VPN 映射为 PPN 时, 需遍历整个页表(但此页表只占用少量内存单元)</li>\n</ul>\n<h4 id=\"段页式存储管理\"><a href=\"#%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\" aria-label=\"段页式存储管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>段页式存储管理</h4>\n<p>在页式存储管理基础上, 引入段式存储管理</p>\n<p>&#x3C;— vsn — vpn — vpo —> 映射为 &#x3C;— ppn — ppo —></p>\n<blockquote>\n<p>sn: segment number, pn:page number, po: page offset</p>\n</blockquote>\n<p>若以 4K(limit) 为 1 个页表大小, 则下级页表首址为 <code class=\"language language-text\">段/页表中某项的值 &lt;&lt; 12</code>(2^12 = 4K)</p>\n<ul>\n<li>以 vsn 为索引在进程段表中找到段表项, 获取段(页表)基址与段大小信息(item<em>value/limit): base = item</em>value &#x3C;&#x3C; log2(limit)</li>\n<li>以 vpn 为索引在进程页表(页表基址 = base中找到页表项, 获取 ppn</li>\n<li>ppn &#x3C;&#x3C; log2(limit) + vpo(ppo) 为实际物理地址</li>\n</ul>\n<h3 id=\"内存的特权级\"><a href=\"#%E5%86%85%E5%AD%98%E7%9A%84%E7%89%B9%E6%9D%83%E7%BA%A7\" aria-label=\"内存的特权级 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存的特权级</h3>\n<p>0: 最高特权级, 3: 最低特权级</p>\n<h4 id=\"特权级检查\"><a href=\"#%E7%89%B9%E6%9D%83%E7%BA%A7%E6%A3%80%E6%9F%A5\" aria-label=\"特权级检查 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特权级检查</h4>\n<ul>\n<li>CPL/RPL: 访问者特权级</li>\n<li>DRL: 段描述符/门描述符(中断/陷阱门)中保存的特权级, 表示被访问段/中断服务/陷阱的特权级</li>\n<li>CPL/RPL &#x3C;= DRL e.g 0 &#x3C; 3</li>\n</ul>\n<h4 id=\"特权级切换\"><a href=\"#%E7%89%B9%E6%9D%83%E7%BA%A7%E5%88%87%E6%8D%A2\" aria-label=\"特权级切换 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特权级切换</h4>\n<h5 id=\"ring-0-to-ring-3\"><a href=\"#ring-0-to-ring-3\" aria-label=\"ring 0 to ring 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ring 0 to ring 3</h5>\n<ul>\n<li>interrupt/trap: push SS(<strong>RPL=3</strong>) -> ESP -> EFLAGS -> CS(<strong>RPL=3</strong>) -> EIP -> Error Code\n_   iret: pop above variables, move to ring 3</li>\n</ul>\n<h5 id=\"ring-3-to-ring-0-特权级提升\"><a href=\"#ring-3-to-ring-0-%E7%89%B9%E6%9D%83%E7%BA%A7%E6%8F%90%E5%8D%87\" aria-label=\"ring 3 to ring 0 特权级提升 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ring 3 to ring 0 (特权级提升)</h5>\n<ul>\n<li>interrupt/trap: stack switch</li>\n<li>push EFLAGS -> CS(<strong>RPL=0</strong>) -> EIP -> Error Code</li>\n<li>iret: pop above variables, move to ring 0</li>\n</ul>\n<h4 id=\"tsstask-state-segment\"><a href=\"#tsstask-state-segment\" aria-label=\"tsstask state segment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TSS(Task State Segment)</h4>\n<p>保存不同特权级的堆栈信息(SS/ESP)</p>\n<p>全局描述符表中保存一个 TSS Descriptor(TSS base + TSS limit): allocate TSS memory -> init TSS -> fill TSS descriptor in GDT -> set TSS selector(task register)</p>\n<h2 id=\"虚拟内存管理\"><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\" aria-label=\"虚拟内存管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟内存管理</h2>\n<p>虚拟内存 = 物理内存 + 外存</p>\n<h3 id=\"page-fault\"><a href=\"#page-fault\" aria-label=\"page fault permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Page Fault</h3>\n<ul>\n<li>虚拟地址越界: 访问不存在的虚拟地址</li>\n<li>对只读地址进行写操作</li>\n<li>访问未映射虚拟页(swap in/out)</li>\n<li>CPU 将产生异常的的线性地址(linear address) 存储在 CR2 寄存器中, 将 errorCode(bit2-访问权限异常,bit1-写异常,bit0-物理页不存在)压入中断栈</li>\n</ul>\n<blockquote>\n<p>CR0: 处理器模式(实/保护/分段/分页模式); CR2: Page Fault Linear Address; CR3: Page-Directory Base Address Register</p>\n</blockquote>\n<h3 id=\"覆盖与交换\"><a href=\"#%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2\" aria-label=\"覆盖与交换 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>覆盖与交换</h3>\n<h4 id=\"覆盖技术overlay\"><a href=\"#%E8%A6%86%E7%9B%96%E6%8A%80%E6%9C%AFoverlay\" aria-label=\"覆盖技术overlay permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>覆盖技术(overlay)</h4>\n<p>将程序中相互独立的模块分成一组, 为每组按最大模块分配内存单元</p>\n<h4 id=\"交换技术swap\"><a href=\"#%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AFswap\" aria-label=\"交换技术swap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>交换技术(swap)</h4>\n<p>将挂起进程的整个地址空间换出至外存(swap out), 将需用进程的整个地址空间换入至内存(swap in), 进程交替运行</p>\n<h3 id=\"虚拟页式存储管理\"><a href=\"#%E8%99%9A%E6%8B%9F%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\" aria-label=\"虚拟页式存储管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟页式存储管理</h3>\n<ul>\n<li>只将运行进程所必需页面装入内存, 其余页面至于外存</li>\n<li>进程发生缺页异常时, 将所要求缺页装入内存: 选择目标物理页面 -> 无未占用物理页面, 则换出闲置物理页面(访问位) -> 装入物理内存,更新页表项(换入逻辑地址与换出逻辑地址对应的页表项的驻留位/修改位/访问位/锁定位以及物理页号 ppn)</li>\n<li>监控已经装入内存的页面, 及时将不需要页面换出至外存</li>\n</ul>\n<h4 id=\"标志位\"><a href=\"#%E6%A0%87%E5%BF%97%E4%BD%8D\" aria-label=\"标志位 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>标志位</h4>\n<ul>\n<li>驻留位: 此逻辑地址对应的页面在内存中</li>\n<li>修改位: 此页面是否被修改过, 判定此页面换出时策略(写回外存/直接丢弃)</li>\n<li>访问位: 此页面是否被读/写过, 判定此页面是否需要换出至外存</li>\n<li>锁定位: 此页面不会被换出</li>\n</ul>\n<h4 id=\"页面置换算法\"><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\" aria-label=\"页面置换算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页面置换算法</h4>\n<p>当出现缺页异常且物理内存已满时, 需要以页面置换算法为指导, 换出闲置物理页面, 换入所要求缺页, 并更新页表项:</p>\n<ul>\n<li>尽可能减少物理页面的换入换出次数</li>\n<li>只可交换映射到用户空间的物理页</li>\n<li>当页表项中 <code class=\"language language-text\">PTE_P</code> 为0 时, 对应高位地址表示扇区地址(而不是物理位移)</li>\n<li>换入时机: Page Fault 缺页; 换出时机: 积极/消极换出策略</li>\n</ul>\n<h5 id=\"局部置换算法\"><a href=\"#%E5%B1%80%E9%83%A8%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\" aria-label=\"局部置换算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>局部置换算法</h5>\n<p>换入进程 A 的某个页面时, 只可换出进程 A 的某个页面: 为进程分配固定数目的页面</p>\n<h6 id=\"最远未用算法least-recently-usedlru-algorithm\"><a href=\"#%E6%9C%80%E8%BF%9C%E6%9C%AA%E7%94%A8%E7%AE%97%E6%B3%95least-recently-usedlru-algorithm\" aria-label=\"最远未用算法least recently usedlru algorithm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最远未用算法(Least Recently Used/LRU Algorithm)</h6>\n<ul>\n<li>利用<strong>链表等线性结构</strong>维护页面访问时间, 队首为最近一次访问页面(每次访问一个页面后, 把它从线性结构中间抽出至队首), 队尾为最远一次访问页面</li>\n</ul>\n<h6 id=\"时钟算法clock-algorithm\"><a href=\"#%E6%97%B6%E9%92%9F%E7%AE%97%E6%B3%95clock-algorithm\" aria-label=\"时钟算法clock algorithm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>时钟算法(Clock Algorithm)</h6>\n<ul>\n<li>利用<strong>循环链表</strong>维护页面(指针指向最先换入内存的页面), 页表项访问位维护访问记录(访问后将访问位置 1)</li>\n<li>缺页时, 从指针处开始查找页面进行置换: 若访问位为 0, 则进行置换; 若访问位为 1, 则将此页面访问位置 0, 继续查找未访问页面</li>\n<li>改进: 增加修改位</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">指针扫描前</th>\n<th align=\"center\">指针扫描后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">访问位 修改位</td>\n<td align=\"center\">访问位 修改位</td>\n</tr>\n<tr>\n<td align=\"center\">0 0</td>\n<td align=\"center\">置换</td>\n</tr>\n<tr>\n<td align=\"center\">0 1</td>\n<td align=\"center\">0 0</td>\n</tr>\n<tr>\n<td align=\"center\">1 0</td>\n<td align=\"center\">0 0</td>\n</tr>\n<tr>\n<td align=\"center\">1 1</td>\n<td align=\"center\">0 1</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"最不常用算法least-frequently-usedlfu-algorithm\"><a href=\"#%E6%9C%80%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95least-frequently-usedlfu-algorithm\" aria-label=\"最不常用算法least frequently usedlfu algorithm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最不常用算法(Least Frequently Used/LFU Algorithm)</h6>\n<ul>\n<li>利用<strong>链表等线性结构</strong>维护页面访问时间, 队首为最多访问次数页面(每次访问一个页面后, 访问次数+1, 并排序), 队尾为最少访问次数页面</li>\n</ul>\n<h5 id=\"全局置换算法\"><a href=\"#%E5%85%A8%E5%B1%80%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\" aria-label=\"全局置换算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局置换算法</h5>\n<ul>\n<li>换入进程 A 的某个页面时, 可换出其他进程的某个页面: 为进程分配可变数目的页面</li>\n<li>关键: 确定为不同进程分配的页面数目</li>\n<li>抖动(thrashing): 进程过多, 导致大部分进程的常驻集&#x3C;工作集, 缺页率较高</li>\n</ul>\n<h6 id=\"工作集算法\"><a href=\"#%E5%B7%A5%E4%BD%9C%E9%9B%86%E7%AE%97%E6%B3%95\" aria-label=\"工作集算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工作集算法</h6>\n<ul>\n<li>工作集(随时间动态变化集): 一个进程当前正在使用的逻辑页面集合, WorkingSet(currentTime, workingSetWindow(访问时间窗口)) <code class=\"language language-text\">(cT - wSW, cT + wSW)</code></li>\n<li>根据工作集大小(逻辑页面集合), 为该进程分配常驻集(合适数目的物理页面集合): 若常驻集 > 工作集, 则缺页率较低</li>\n<li>再额外维护一个类希 LRU 算法中的访存链表, 记录近期访问过的物理页面, 将其也加入常驻集</li>\n</ul>\n<h6 id=\"缺页率算法\"><a href=\"#%E7%BC%BA%E9%A1%B5%E7%8E%87%E7%AE%97%E6%B3%95\" aria-label=\"缺页率算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺页率算法</h6>\n<p>当缺页频繁时, 缺页时将缺页的页面加入常驻集; 当缺页不频繁时, 缺页时将不属于工作集的页面移出常驻集</p>\n<h4 id=\"实现\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-label=\"实现 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h4>\n<ul>\n<li>为每个进程分配一个 vma 块, 模拟一个完整的物理内存</li>\n<li>vmas 按起始<strong>地址从小至大</strong>形成一个双向链表, 且地址空间<strong>没有任何交集</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VM_READ  0x00000001</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VM_WRITE 0x00000002</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VM_EXEC  0x00000004</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VM_USER  (VM_READ | VM_WRITE | VM_EXEC)</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> __mm <span class=\"token punctuation\">{</span>\n    list_entry_t mmap_list<span class=\"token punctuation\">;</span> <span class=\"token comment\">// header of vmas' list</span>\n    vma <span class=\"token operator\">*</span>mmap_cache<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// current accessed vma(used for speed purpose)</span>\n    pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// PDT for vmas</span>\n    <span class=\"token keyword\">int</span> map_count<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// count of vmas</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>sm_priv<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// private data for swap manager</span>\n<span class=\"token punctuation\">}</span> mm<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> __vma <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> mm <span class=\"token operator\">*</span>vm_mm<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// all vmas use the same PDT(page directory table)</span>\n    uintptr_t vm_start<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// start address of vma (align to PGSIZE)</span>\n    uintptr_t vm_end<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// end address of vma   (align to PGSIZE)</span>\n    uint32_t vm_flags<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// flags of vma</span>\n    list_entry_t vma_list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// doubly linked list: sort all vmas by start address</span>\n<span class=\"token punctuation\">}</span> vma<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"中断interrupt-service-routineinterrupt-quest\"><a href=\"#%E4%B8%AD%E6%96%ADinterrupt-service-routineinterrupt-quest\" aria-label=\"中断interrupt service routineinterrupt quest permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中断(Interrupt Service Routine/Interrupt Quest)</h2>\n<ul>\n<li>NMI 中断(Non Maskable Interrupt) 与 INTR 中断(可屏蔽中断)</li>\n<li>x86PC 中断控制芯片: 8259A PIC</li>\n</ul>\n<h3 id=\"中断进入\"><a href=\"#%E4%B8%AD%E6%96%AD%E8%BF%9B%E5%85%A5\" aria-label=\"中断进入 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中断进入</h3>\n<h4 id=\"保护现场\"><a href=\"#%E4%BF%9D%E6%8A%A4%E7%8E%B0%E5%9C%BA\" aria-label=\"保护现场 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>保护现场</h4>\n<ul>\n<li>push PSW(Program State Word): (cs:eip + eflags)</li>\n<li>push PC(Program Counter)</li>\n<li>中断向量表(将中断向量表对应的中断的 PSW(高 2 字节) 与 PC(低 2 字节) 先后替换原 PSW 与 PC)</li>\n<li>系统堆栈</li>\n<li>中断屏蔽码: n 位 2进制数(n 为中断总数), 允许响应 n 号中断则该位置 1</li>\n</ul>\n<p>程序状态字:</p>\n<ul>\n<li>当前执行指令(eip)</li>\n<li>当前指令执行情况</li>\n<li>处理机所处状态</li>\n<li>中断屏蔽码(程序在执行时应屏蔽的中断)</li>\n<li>寻址方法/编址/保护键</li>\n<li>响应中断的内容</li>\n</ul>\n<h3 id=\"中断实现\"><a href=\"#%E4%B8%AD%E6%96%AD%E5%AE%9E%E7%8E%B0\" aria-label=\"中断实现 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中断实现</h3>\n<h4 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-label=\"概述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h4>\n<ul>\n<li>硬件发生了某个事件后告诉中断控制器(PIC), 中断控制器汇报给 CPU</li>\n<li>CPU 从中断控制器处获取中断号, 根据中断号调用对应中断服务例程</li>\n<li>处理完成后重新回到之前的执行流程</li>\n</ul>\n<h4 id=\"实现-1\"><a href=\"#%E5%AE%9E%E7%8E%B0-1\" aria-label=\"实现 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h4>\n<ul>\n<li>发生中断, PIC 报告中断号给 CPU</li>\n<li>CPU 调用对应处理程序 irsr<em>x/irq</em>x</li>\n<li>irsr<em>x/irq</em>x 负责压入相关信息(中断号/错误码), 然后跳转至统一处理函数 <code class=\"language language-text\">common_stub</code></li>\n<li><code class=\"language language-text\">common_stub</code>: 压栈 -> 调用 fault<em>handler/req</em>handler -> 出栈</li>\n<li>进入 handler 后, 再根据中断号/错误码(结构体)以及栈帧信息(结构体), 进行实际处理(真正处理逻辑)</li>\n<li>在进入 handler 之前, 都是通过汇编代码进行最简单的处理(压入相关信息), 将实际中断处理逻辑放在 C 语言中, 再辅以内联汇编, 可大大地提升中断处理程序的编写效率以及中断处理程序的处理能力</li>\n</ul>\n<h3 id=\"系统调用\"><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\" aria-label=\"系统调用 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>系统调用</h3>\n<ul>\n<li>保护系统安全, 提升可靠性与安全性</li>\n<li>调用: 用户态, 执行: 管态/内核态</li>\n</ul>\n<h2 id=\"进程资源分配单位\"><a href=\"#%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E5%8D%95%E4%BD%8D\" aria-label=\"进程资源分配单位 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程(资源分配单位)</h2>\n<ul>\n<li>独立性: 无副作用(确定性), 可重现</li>\n<li>并发性(宏观并行, 微观串行): 提升效率, 共享资源, 高度模块化</li>\n</ul>\n<h3 id=\"处理机进程的特权级\"><a href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E6%9D%83%E7%BA%A7\" aria-label=\"处理机进程的特权级 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>处理机(进程)的特权级</h3>\n<ul>\n<li>处理机的态/处理机的特权级: 根据对资源和机器指令的使用权限, 将处理执行时的工作状态区分为不同的状态</li>\n<li>管理(supervisor mode)/系统态: 使用全部机器指令(包括特权指令), 可使用所有资源, 允许访问整个内存区, 运行系统程序</li>\n<li>用户态: 禁止使用特权指令(I/O设备指令, 直接修改特殊寄存器指令, 改变机器状态指令), 不可<strong>直接</strong>取用资源与改变机器状态, 只可访问自己的存储区域, 运行用户程序</li>\n<li>用户态切换至管态: 错误/异常状态(除0/缺页), 外部中断(I/O), 系统调用, 这一过程是由<strong>硬件完成</strong>的</li>\n</ul>\n<h3 id=\"进程状态生命周期\"><a href=\"#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" aria-label=\"进程状态生命周期 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程状态/生命周期</h3>\n<p>创建, 就绪(ready), 运行(running), 等待(wait/sleeping), 挂起(suspend: 进程由内存换出至外存), 结束(抢占, 唤醒): 进程优先级与剩余内存单元在一定程度上会影响进程状态</p>\n<ul>\n<li>进程首先在 cpu 初始化或者 sys_fork 的时候被创建,当为该进程分配了一个进程控制块之后,该进程进入 uninit 态</li>\n<li>当进程完全完成初始化之后,该进程转为 runnable 态</li>\n<li>当到达调度点时,由调度器 sched_class 根据运行队列 rq 的内容来判断一个进程是否应该被运行,即把处于runnable 态的进程转换成 running 状态,从而占用 CPU 执行</li>\n<li>running 态的进程通过 wait 等系统调用被阻塞,进入 sleeping 态</li>\n<li>sleeping 态的进程被 wakeup 变成 runnable 态的进程</li>\n<li>running 态的进程主动 exit 变成 zombie 态, 然后由其父进程完成对其资源的最后释放,子进程的进程控制块成为 unused</li>\n<li>所有从 runnable 态变成其他状态的进程都要出运行队列(dequeue), 反之，被放入某个运行队列中(enqueue)</li>\n</ul>\n<h4 id=\"进程控制块process-control-block\"><a href=\"#%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97process-control-block\" aria-label=\"进程控制块process control block permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程控制块(Process Control Block)</h4>\n<p>通过组织管理 PCB(链表/索引表) 来组织管理进程; 在进程创建/终止的同时, 生成/回收改进程的 PCB:</p>\n<ul>\n<li>进程信息: 名字/pid/uid</li>\n<li>链表信息: 父进程指针/所属队列指针(就绪队列/IO等待队列/挂起队列)</li>\n<li>CPU调度/运行时信息: eflags/cr3/状态</li>\n<li>内存资源信息: 堆指针/栈指针/虚拟内存页面指针</li>\n<li>上下文信息(用于进程/上下文切换时保存/恢复上下文): trap frame/context(register files)</li>\n</ul>\n<h3 id=\"进程通信\"><a href=\"#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1\" aria-label=\"进程通信 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程通信</h3>\n<ul>\n<li>直接通信: send(proc, msg), receive(proc, msg) <code class=\"language language-text\">shmctl() shm*</code></li>\n<li>间接通信: send(msg<em>que, msg), receive(msg</em>que, msg) <code class=\"language language-text\">msgctl() msg*</code></li>\n</ul>\n<h3 id=\"线程cpu-调度单位\"><a href=\"#%E7%BA%BF%E7%A8%8Bcpu-%E8%B0%83%E5%BA%A6%E5%8D%95%E4%BD%8D\" aria-label=\"线程cpu 调度单位 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>线程(CPU 调度单位)</h3>\n<ul>\n<li>进程缺陷: 共享数据不便, 系统开销大</li>\n<li>线程共享段表/共享库/数据/代码/环境变量/文件描述符集合/地址空间, 但拥有独立的堆/栈/通用寄存器</li>\n<li>线程控制块(Thread Control Block)</li>\n<li>用户线程与内核线程: 多为 1 对 1</li>\n</ul>\n<h4 id=\"idleproc0号内核线程\"><a href=\"#idleproc0%E5%8F%B7%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B\" aria-label=\"idleproc0号内核线程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>idleproc(0号内核线程)</h4>\n<ul>\n<li>工作就是不停地查询，直至有其他内核线程处于就绪状态, 令调度器执行那个内核线程</li>\n<li>idleproc 内核线程是在操作系统没有其他内核线程可执行的情况下才会被调用</li>\n<li>在所有进程中，只有 idleproc(内核创建的第一个内核线程) 没有父进程</li>\n</ul>\n<h3 id=\"内核线程与用户进程\"><a href=\"#%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B\" aria-label=\"内核线程与用户进程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内核线程与用户进程</h3>\n<ul>\n<li>内核线程只运行在内核态</li>\n<li>用户进程会交替运行在用户态和内核态(系统调用/外设中断/异常中断)</li>\n<li>所有内核线程直接使用共同的内核内存空间, 拥有相同的内核虚拟地址空间(包括物理地址空间)</li>\n<li>每个用户进程拥有单独的用户内存空间(虚拟内存单元)</li>\n</ul>\n<h3 id=\"实现-2\"><a href=\"#%E5%AE%9E%E7%8E%B0-2\" aria-label=\"实现 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h3>\n<h4 id=\"process-context执行现场\"><a href=\"#process-context%E6%89%A7%E8%A1%8C%E7%8E%B0%E5%9C%BA\" aria-label=\"process context执行现场 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>process context(执行现场)</h4>\n<ul>\n<li>设置好执行现场后, 一旦调度器选择了 initproc 执行, 就需要根据 initproc->context 中保存的执行现场来恢复 initproc 的执行</li>\n<li>\n<p>通过 proc<em>run 和进一步的 switch</em>to 函数完成两个执行现场的切换，具体流程如下:</p>\n<ul>\n<li>让 current 指向 next 内核线程 initproc</li>\n<li>设置任务状态段 ts 中特权态0下的栈顶指针 esp0 为 next 内核线程 initproc 的内核栈的栈顶, 即 next->kstack + KSTACKSIZE</li>\n<li>设置 CR3 寄存器的值为 next 内核线程 initproc 的页目录表起始地址 next->cr3</li>\n<li>由 switch_to 函数完成具体的两个线程的执行现场切换, 即切换各个寄存器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"do_fork-function\"><a href=\"#do_fork-function\" aria-label=\"do_fork function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language language-text\">do_fork</code> function</h4>\n<ul>\n<li>分配并初始化进程控制块(alloc_proc函数)</li>\n<li>分配并初始化内核栈(setup_stack函数)</li>\n<li>根据 clone<em>flag 标志复制或共享进程内存管理结构(copy</em>mm函数)</li>\n<li>设置进程在内核(或用户态)正常运行和调度所需的中断帧和执行上下文(copy_thread函数)</li>\n<li>把设置好的进程控制块放入 hash<em>list 和 proc</em>list 两个全局进程链表中</li>\n<li>把进程状态设置为“就绪”态</li>\n<li>设置返回码为子进程的id号</li>\n</ul>\n<p>fork() 的主要行为:</p>\n<ul>\n<li>申请 pid 与进程结构</li>\n<li>设置 ppid 为父进程的 pid</li>\n<li>复制用户相关的字段, 如 p<em>pgrp/p</em>gid/p<em>ruid/p</em>euid/p<em>rgid/p</em>egid</li>\n<li>复制调度相关的字段, 如 p<em>cpu/p</em>nice/p_pri</li>\n<li>复制父进程的文件描述符(p_ofile), 并增加引用计数</li>\n<li>复制父进程的信号处理例程(p_sigact)</li>\n<li>通过vm<em>clone(), 复制父进程的地址空间(p</em>vm)</li>\n<li>复制父进程的寄存器状态(p_contxt)</li>\n<li>复制父进程的中断上下文, 并设置tf->eax为 0, 使fork()在子进程中返回0。</li>\n</ul>\n<h4 id=\"do_execve-function\"><a href=\"#do_execve-function\" aria-label=\"do_execve function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language language-text\">do_execve</code> function</h4>\n<p>exec() 的主要行为: </p>\n<ul>\n<li>*读取文件的第一个块, 检查 Magic Number(NMAGIC) 是否正确</li>\n<li>保存参数(argv)到临时分配的几个物理页, 其中的每个字符串单独一页</li>\n<li>清空旧的进程地址空间(vm<em>clear()), 并结合可执行文件的 header, 初始化新的进程地址空间(vm</em>renew())</li>\n<li>将 argv 与 argc 压入新地址空间中的栈</li>\n<li>释放临时存放参数的几个物理页</li>\n<li>关闭带有 FD_CLOEXEC 标识的文件描述符</li>\n<li>清理信号处理例程</li>\n<li>通过_retu()返回用户态</li>\n</ul>\n<h2 id=\"处理机调度-1\"><a href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6-1\" aria-label=\"处理机调度 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>处理机调度</h2>\n<ul>\n<li>从就绪队列中挑选下一个占用 CPU 的进程(挑选进程的内核函数)</li>\n<li>从多个可用 CPU 中挑选使用 CPU 资源</li>\n</ul>\n<h3 id=\"调度时机\"><a href=\"#%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA\" aria-label=\"调度时机 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>调度时机</h3>\n<ul>\n<li>进程停止运行, 进入等待/挂起/终止状态</li>\n<li>进程的中断请求完成时, 由等待状态进入就绪状态, 准备抢占 CPU 资源(准备从内核态返回用户态)</li>\n</ul>\n<h4 id=\"六大调度时机\"><a href=\"#%E5%85%AD%E5%A4%A7%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA\" aria-label=\"六大调度时机 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>六大调度时机</h4>\n<ul>\n<li>proc.c::do_exit 用户线程执行结束,主动放弃CPU控制权</li>\n<li>proc.c::do_wait 用户线程等待子进程结束,主动放弃CPU控制权</li>\n<li>\n<p>proc.c::init_main</p>\n<ul>\n<li>initproc 内核线程等待所有用户进程结束,如果没有结束,就主动放弃CPU控制权</li>\n<li>initproc 内核线程在所有用户进程结束后,让 kswapd 内核线程执行10次，用于回收空闲内存资源</li>\n</ul>\n</li>\n<li>proc.c::cpu_idle idleproc 内核线程的工作就是等待有处于就绪态的进程或线程,如果有就调用schedule函数</li>\n<li>sync.h::lock 在获取锁的过程中,如果无法得到锁,则主动放弃CPU控制权</li>\n<li>trap.c::trap 如果在当前进程在用户态被打断,且当前进程控制块的成员变量 need_resched 设置为1,则当前线程会放弃CPU控制权</li>\n</ul>\n<h3 id=\"调度策略算法\"><a href=\"#%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E7%AE%97%E6%B3%95\" aria-label=\"调度策略算法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>调度策略/算法</h3>\n<h4 id=\"算法目标\"><a href=\"#%E7%AE%97%E6%B3%95%E7%9B%AE%E6%A0%87\" aria-label=\"算法目标 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>算法目标</h4>\n<ul>\n<li>CPU 有效使用率</li>\n<li>吞吐量(高带宽): 单位时间内完成进程数量</li>\n<li>等待时间(低延迟): 进程在就绪队列等待总时间</li>\n<li>周转时间(低延迟): 进程从初始化到结束总时间</li>\n<li>响应时间(低延迟): 从提交请求到产生响应总时间</li>\n</ul>\n<h4 id=\"先来先服务算法first-come-first-servedfcfs\"><a href=\"#%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E7%AE%97%E6%B3%95first-come-first-servedfcfs\" aria-label=\"先来先服务算法first come first servedfcfs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先来先服务算法(First Come First Served/FCFS)</h4>\n<ul>\n<li>依次执行就绪队列中的各进程(先进入就绪队列先执行)</li>\n<li>CPU 利用率较低</li>\n</ul>\n<h4 id=\"短进程优先算法shortest-process-nextshortest-remaining-time\"><a href=\"#%E7%9F%AD%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95shortest-process-nextshortest-remaining-time\" aria-label=\"短进程优先算法shortest process nextshortest remaining time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>短进程优先算法(Shortest Process Next/Shortest Remaining Time)</h4>\n<ul>\n<li>优先执行周转耗时/剩余耗时最短的进程</li>\n<li>若短进程过多, 则导致长进程一直无法执行</li>\n</ul>\n<h4 id=\"最高响应比优先算法highest-response-ratio-next\"><a href=\"#%E6%9C%80%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95highest-response-ratio-next\" aria-label=\"最高响应比优先算法highest response ratio next permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最高响应比优先算法(Highest Response Ratio Next)</h4>\n<ul>\n<li>R = (waitTime + serviceTime) / serviceTime: 已等待时间越长, 优先级上升</li>\n<li>修正短进程优先算法的缺点</li>\n</ul>\n<h4 id=\"时间片轮转算法round-robin\"><a href=\"#%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E7%AE%97%E6%B3%95round-robin\" aria-label=\"时间片轮转算法round robin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>时间片轮转算法(Round Robin)</h4>\n<ul>\n<li>在 FCFS 基础上, 设定一个基本时间单元, 每经过一个时间单元, 轮转至下一个先到进程(并进行循环轮转)</li>\n<li>额外的上下文切换</li>\n<li>时间片合适大小: 10 ms</li>\n</ul>\n<h4 id=\"多级队列调度算法mq\"><a href=\"#%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95mq\" aria-label=\"多级队列调度算法mq permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多级队列调度算法(MQ)</h4>\n<ul>\n<li>将就绪队列分成多个独立子队列, 每个队列可采取不同调度算法</li>\n<li>前台交互队列使用时间片轮转算法, 后台 IO 队列使用先来先服务算法</li>\n<li>队列间使用时间片轮转算法</li>\n</ul>\n<h4 id=\"多级反馈队列算法mlfq\"><a href=\"#%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E7%AE%97%E6%B3%95mlfq\" aria-label=\"多级反馈队列算法mlfq permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多级反馈队列算法(MLFQ)</h4>\n<ul>\n<li>优先级高的子队列时间片小, 优先级低的子队列时间片大</li>\n<li>CPU 密集型进程(耗时高)优先级下降很快</li>\n<li>IO 密集型进程(耗时低)停留在高优先级</li>\n</ul>\n<h2 id=\"同步互斥\"><a href=\"#%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\" aria-label=\"同步互斥 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同步互斥</h2>\n<ul>\n<li>互斥(mutual exclusion)</li>\n<li>死锁(deadlock)</li>\n<li>饥饿(starvation)</li>\n</ul>\n<h3 id=\"临界区的访问原则\"><a href=\"#%E4%B8%B4%E7%95%8C%E5%8C%BA%E7%9A%84%E8%AE%BF%E9%97%AE%E5%8E%9F%E5%88%99\" aria-label=\"临界区的访问原则 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>临界区的访问原则</h3>\n<ul>\n<li>空闲则入</li>\n<li>忙则等待</li>\n<li>有限等待</li>\n</ul>\n<h3 id=\"基于软件方法的同步互斥\"><a href=\"#%E5%9F%BA%E4%BA%8E%E8%BD%AF%E4%BB%B6%E6%96%B9%E6%B3%95%E7%9A%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\" aria-label=\"基于软件方法的同步互斥 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基于软件方法的同步互斥</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language language-cpp\"><code class=\"language language-cpp\"><span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 表示谁该进入临界区</span>\n<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 表示进程是否准备好进入临界区</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language language-cpp\"><code class=\"language language-cpp\"><span class=\"token comment\">// 对于 2 个线程的情况</span>\n<span class=\"token comment\">// Peterson Algorithm</span>\n<span class=\"token comment\">// 线程 i</span>\nflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nturn <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 后设置 turn 标志的进程不可进入临界区, 会在 while 循环进行等待</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> turn <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\t\t<span class=\"token comment\">// critical section</span>\n\nflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language language-cpp\"><code class=\"language language-cpp\"><span class=\"token comment\">// Dekkers Algorithm</span>\n<span class=\"token comment\">// 线程 i</span>\nturn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nflag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>turn <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>turn <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t\tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// critical section</span>\n\n\tturn <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"高级抽象的同步互斥\"><a href=\"#%E9%AB%98%E7%BA%A7%E6%8A%BD%E8%B1%A1%E7%9A%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\" aria-label=\"高级抽象的同步互斥 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高级抽象的同步互斥</h3>\n<p>利用原子操作实现互斥数据结构</p>\n<h4 id=\"locksemaphore\"><a href=\"#locksemaphore\" aria-label=\"locksemaphore permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lock/semaphore</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language language-cpp\"><code class=\"language language-cpp\"><span class=\"token keyword\">struct</span> lock<span class=\"token operator\">/</span>semaphore <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> locked<span class=\"token operator\">/</span>sem <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// n: 并发数/可用资源数</span>\n\twait_queue q<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> acquire<span class=\"token operator\">/</span><span class=\"token function\">prolaag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlocked<span class=\"token operator\">/</span>sem<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locked<span class=\"token operator\">/</span>sem <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sleep_and_enqueue</span><span class=\"token punctuation\">(</span>this_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> release<span class=\"token operator\">/</span><span class=\"token function\">verhoog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlocked<span class=\"token operator\">/</span>sem<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locked<span class=\"token operator\">/</span>sem <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">wakeup_and_dequeue</span><span class=\"token punctuation\">(</span>other_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"monitor\"><a href=\"#monitor\" aria-label=\"monitor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>monitor</h4>\n<ul>\n<li>与 semaphore 相反, 初始 0, <code class=\"language language-text\">wait(++ &amp;&amp; sleep)</code>, <code class=\"language language-text\">signal(-- &amp;&amp; wakeup)</code></li>\n<li>管程内可以中断执行, 并 notify 其他等待线程</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#%E6%AD%BB%E9%94%81\" aria-label=\"死锁 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>死锁</h3>\n<p>非抢占持有互斥循环等待</p>\n<h3 id=\"实现-3\"><a href=\"#%E5%AE%9E%E7%8E%B0-3\" aria-label=\"实现 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h3>\n<h4 id=\"pv-操作\"><a href=\"#pv-%E6%93%8D%E4%BD%9C\" aria-label=\"pv 操作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>P/V 操作</h4>\n<h5 id=\"具体实现信号量的p操作\"><a href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9A%84p%E6%93%8D%E4%BD%9C\" aria-label=\"具体实现信号量的p操作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>具体实现信号量的P操作</h5>\n<ul>\n<li>关中断</li>\n<li>判断当前信号量的value是否大于0</li>\n<li>如果是>0，则表明可以获得信号量，故让value减一，并打开中断返回</li>\n<li>如果不是>0，则表明无法获得信号量，故需要将当前的进程加入到等待队列中，并打开中断，然后运行调度器选择另外一个进程执行</li>\n<li>如果被V操作唤醒，则把自身关联的wait从等待队列中删除（此过程需要先关中断，完成后开中断）</li>\n</ul>\n<h5 id=\"具体实现信号量的v操作\"><a href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9A%84v%E6%93%8D%E4%BD%9C\" aria-label=\"具体实现信号量的v操作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>具体实现信号量的V操作</h5>\n<ul>\n<li>关中断</li>\n<li>如果信号量对应的 wait queue 中没有进程在等待，直接把信号量的 value 加一，然后开中断返回</li>\n<li>如果有进程在等待且进程等待的原因是 semophore 设置的，则调用 wakeup_wait 函数将 waitqueue 中等待的第一个wait删除，且把此wait关联的进程唤醒,最后开中断返回</li>\n</ul>\n<h4 id=\"管程\"><a href=\"#%E7%AE%A1%E7%A8%8B\" aria-label=\"管程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>管程</h4>\n<p>管程由四部分组成：</p>\n<ul>\n<li>管程内部的共享变量(mutex): 一个二值信号量，是实现每次只允许一个进程进入管程的关键元素，确保了互斥访问性质</li>\n<li>管程内部的条件变量: 通过执行 wait<em>cv,会使得等待某个条件C为真的进程能够离开管程并睡眠，且让其他进程进入管程继续执行;而进入管程的某进程设置条件C为真并执行signal</em>cv时，能够让等待某个条件C为真的睡眠进程被唤醒，从而继续进入管程中执行</li>\n<li>管程内部并发执行的进程</li>\n<li>对局部于管程内部的共享数据设置初始值的语句</li>\n<li>成员变量信号量 next: 配合进程对条件变量 cv 的操作而设置的，由于发出signal_cv的进程A会唤醒睡眠进程B，进程B执行会导致进程A睡眠，直到进程B离开管程，进程A才能继续执行，这个同步过程是通过信号量next完成</li>\n<li>整形变量 next<em>count: 表示由于发出 singal</em>cv 而睡眠的进程个数</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> monitor<span class=\"token punctuation\">{</span>\n    semaphore_t mutex<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the mutex lock for going into the routines in monitor, should be initialized to 1</span>\n    semaphore_t next<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// the next semaphore is used to down the signaling proc itself, and the other OR wakeuped</span>\n    <span class=\"token keyword\">int</span> next_count<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// the number of of sleeped signaling</span>\n    proc condvar_t <span class=\"token operator\">*</span>cv<span class=\"token punctuation\">;</span> <span class=\"token comment\">// the condvars in monitor</span>\n<span class=\"token punctuation\">}</span> monitor_t<span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"conditional-variable\"><a href=\"#conditional-variable\" aria-label=\"conditional variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Variable</h5>\n<ul>\n<li>wait_cv： 被一个进程调用, 以等待断言 Pc 被满足后该进程可恢复执行. 进程挂在该条件变量上等待时, 不被认为是占用了管程</li>\n<li>signal_cv：被一个进程调用, 以指出断言 Pc 现在为真, 从而可以唤醒等待断言 Pc 被满足的进程继续执行</li>\n<li>信号量sem: 用于让发出 wait<em>cv 操作的等待某个条件C为真的进程睡眠, 而让发出 signal</em>cv 操作的进程通过这个 sem 来唤醒睡眠的进程</li>\n<li>count: 表示等在这个条件变量上的睡眠进程的个数</li>\n<li>owner: 表示此条件变量的宿主是哪个管程</li>\n</ul>\n<p>typedef struct condvar{\nsemaphore<em>t sem;            // the sem semaphore is used to down the waiting proc, and the signaling proc should up the waiting\nproc int count;             // the number of waiters on\ncondvar monitor</em>t * owner;  // the owner(monitor) of this condvar\n} condvar_t;</p>\n<h2 id=\"文件系统-1\"><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-1\" aria-label=\"文件系统 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件系统</h2>\n<ul>\n<li>分配文件磁盘空间: 分配与管理</li>\n<li>管理文件集合: 定位, 命名, 文件系统结构</li>\n<li>数据可靠和安全: 持久化保存, 防止数据丢失(系统崩溃时)</li>\n<li>基本操作单位: 数据块</li>\n<li>文件访问模式: 顺序访问/随机访问/索引访问</li>\n<li>文件系统种类: 磁盘/数据库/日志/网络/分布式/虚拟文件系统</li>\n</ul>\n<h3 id=\"文件组成\"><a href=\"#%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90\" aria-label=\"文件组成 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件组成</h3>\n<ul>\n<li>文件头: 文件属性(名称/类型/大小/权限/路径/创建者/创建时间/最近修改时间)</li>\n<li>文件头: 文件存储位置与顺序</li>\n<li>文件体: 实际字节序列</li>\n</ul>\n<h3 id=\"文件系统基本数据结构\"><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\" aria-label=\"文件系统基本数据结构 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件系统基本数据结构</h3>\n<p>superblock -> dentry -> vnode/inode</p>\n<h4 id=\"文件卷控制块superblock\"><a href=\"#%E6%96%87%E4%BB%B6%E5%8D%B7%E6%8E%A7%E5%88%B6%E5%9D%97superblock\" aria-label=\"文件卷控制块superblock permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件卷控制块(superblock)</h4>\n<ul>\n<li>每个文件系统只有一个控制块</li>\n<li>描述该文件系统全局信息: 数据块(大小等信息), 空余块信息, 文件指针/引用计数</li>\n</ul>\n<h4 id=\"目录项dentry\"><a href=\"#%E7%9B%AE%E5%BD%95%E9%A1%B9dentry\" aria-label=\"目录项dentry permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录项(dentry)</h4>\n<ul>\n<li>目录是一类特殊的文件: 其内容为文件索引表(文件名/文件指针), 内部采取哈希表存储</li>\n<li>目录与文件构成树状结构</li>\n<li>每个目录项属于一个目录, 一个目录可有多个目录项</li>\n<li>保存目录相关信息: 指向文件控制块, 父目录/子目录信息</li>\n</ul>\n<h4 id=\"文件控制块vnodeinode\"><a href=\"#%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%9D%97vnodeinode\" aria-label=\"文件控制块vnodeinode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件控制块(vnode/inode)</h4>\n<ul>\n<li>每个文件有一个文件控制块</li>\n<li>保存该文件详细信息: 访问权限, 所属者/组, 文件大小, 数据块位置(索引)</li>\n</ul>\n<h4 id=\"文件描述符\"><a href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\" aria-label=\"文件描述符 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件描述符</h4>\n<p>操作系统在打开文件表中维护的打开文件状态与信息:</p>\n<ul>\n<li>文件指针: 最近一次读写位置</li>\n<li>文件打开计数(引用计数): 引用计数为 0 时, 回收相关资源</li>\n<li>文件磁盘位置</li>\n<li>访问权限</li>\n</ul>\n<h4 id=\"打开文件表\"><a href=\"#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%A1%A8\" aria-label=\"打开文件表 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打开文件表</h4>\n<ul>\n<li>系统打开文件表: 保存文件描述符</li>\n<li>进程打开文件表: 指向系统打开文件表某项, 并附加额外信息</li>\n</ul>\n<h3 id=\"文件分配\"><a href=\"#%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D\" aria-label=\"文件分配 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件分配</h3>\n<ul>\n<li>分配方式: 连续分配, 琏式分配, 索引分配</li>\n<li>琏式索引分配: 琏式链接多个索引块</li>\n<li>多级索引分配: 索引分配 + 多级琏式索引块</li>\n</ul>\n<h3 id=\"空闲空间管理\"><a href=\"#%E7%A9%BA%E9%97%B2%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86\" aria-label=\"空闲空间管理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>空闲空间管理</h3>\n<ul>\n<li>bit 位图, 链表, 琏式索引: 保存空闲数据块位置与顺序</li>\n</ul>\n<h3 id=\"冗余磁盘阵列redundant-array-of-inexpensive-disksraid\"><a href=\"#%E5%86%97%E4%BD%99%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97redundant-array-of-inexpensive-disksraid\" aria-label=\"冗余磁盘阵列redundant array of inexpensive disksraid permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>冗余磁盘阵列(Redundant Array of Inexpensive Disks/RAID)</h3>\n<ul>\n<li>RAID-0: 磁盘条带化</li>\n<li>RAID-1: 磁盘镜像(冗余拷贝), 提高可靠性</li>\n<li>RAID-4: 带奇偶校验(校验和)的磁盘条带化, 提高可靠性</li>\n<li>RAID-5: 带分布式奇偶校验的磁盘条带化, 减少校验和所在物理磁盘的读写压力</li>\n<li>RAID-6: 每组条带块有两个冗余块, 可以检查到 2 个磁盘错误</li>\n</ul>\n<h3 id=\"实现-4\"><a href=\"#%E5%AE%9E%E7%8E%B0-4\" aria-label=\"实现 4 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h3>\n<h4 id=\"mount\"><a href=\"#mount\" aria-label=\"mount permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mount</h4>\n<p><code class=\"language language-text\">sfs_do_mount</code>函数中:</p>\n<ul>\n<li>完成了加载位于硬盘上的SFS文件系统的超级块 superblock 和 freemap 的工作l</li>\n<li>在内存中有了 SFS 文件系统的全局信息</li>\n</ul>\n<h4 id=\"index\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index</h4>\n<ul>\n<li>对于普通文件，索引值指向的 block 中保存的是文件中的数据</li>\n<li>对于目录，索引值指向的数据保存的是目录下所有的文件名以及对应的索引节点所在的索引块（磁盘块）所形成的数组</li>\n</ul>\n<h4 id=\"inode\"><a href=\"#inode\" aria-label=\"inode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inode</h4>\n<p>内存inode包含了SFS的硬盘inode信息，而且还增加了其他一些信息，这属于是便于进行是判断否改写、互斥操作、回收和快速地定位等作用。 一个内存inode是在打开一个文件后才创建的，如果关机则相关信息都会消失。而硬盘inode的内容是保存在硬盘中的，只是在进程需要时才被读入到内存中，用于访问文件或目录的具体内容数据</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token keyword\">struct</span> inode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//包含不同文件系统特定inode信息的union成员变量</span>\n        <span class=\"token keyword\">struct</span> device __device_info<span class=\"token punctuation\">;</span> <span class=\"token comment\">//设备文件系统内存inode信息</span>\n        <span class=\"token keyword\">struct</span> sfs_inode __sfs_inode_info<span class=\"token punctuation\">;</span> <span class=\"token comment\">//SFS文件系统内存inode信息</span>\n    <span class=\"token punctuation\">}</span> in_info<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>\n        inode_type_device_info <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">,</span>\n        inode_type_sfs_inode_info<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> in_type<span class=\"token punctuation\">;</span> <span class=\"token comment\">//此inode所属文件系统类型</span>\n\n    atomic_t ref_count<span class=\"token punctuation\">;</span> <span class=\"token comment\">//此inode的引用计数</span>\n    atomic_t open_count<span class=\"token punctuation\">;</span> <span class=\"token comment\">//打开此inode对应文件的个数</span>\n\n    <span class=\"token keyword\">struct</span> fs <span class=\"token operator\">*</span>in_fs<span class=\"token punctuation\">;</span> <span class=\"token comment\">//抽象的文件系统，包含访问文件系统的函数指针</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> inode_ops <span class=\"token operator\">*</span>in_ops<span class=\"token punctuation\">;</span> <span class=\"token comment\">//抽象的inode操作，包含访问inode的函数指针</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language language-c\"><code class=\"language language-c\"><span class=\"token keyword\">struct</span> inode_ops <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> vop_magic<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> uint32_t open_flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> iobuf <span class=\"token operator\">*</span>iob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> iobuf <span class=\"token operator\">*</span>iob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_getdirentry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> iobuf <span class=\"token operator\">*</span>iob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> bool excl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>node_store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vop_lookup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> inode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>node_store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ……\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"device\"><a href=\"#device\" aria-label=\"device permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Device</h4>\n<p>利用 <code class=\"language language-text\">vfs_dev_t</code> 数据结构，就可以让文件系统通过一个链接 <code class=\"language language-text\">vfs_dev_t</code> 结构的双向链表找到device对应的inode数据结构，一个inode节点的成员变量in<em>type的值是0x1234，则此 inode的成员变量in</em>info将成为一个device结构。这样inode就和一个设备建立了联系，这个inode就是一个设备文件</p>\n<h2 id=\"设备管理-1\"><a href=\"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86-1\" aria-label=\"设备管理 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设备管理</h2>\n<ul>\n<li>CPU一般都是通过寄存器的形式来访问外部设备</li>\n<li>外设的寄存器通常包括控制寄存器、状态寄存器与数据寄存器三类, 分别用于发送命令/读取状态/读写数据.</li>\n</ul>\n<h3 id=\"cgaega--chromatext-video-buffer\"><a href=\"#cgaega--chromatext-video-buffer\" aria-label=\"cgaega  chromatext video buffer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CGA/EGA + Chromatext video buffer</h3>\n<p>在内存的低 1MB 中, 有许多地址被映射至外部设备, 其中就包含文字显示模块(显卡控制显示器):</p>\n<ul>\n<li>从 0xB8000 开始, 每 2 个字节表示屏幕上显示的一个字符(80 x 25)</li>\n<li>前一个字节为 字符ASCII码, 后一个字节为 字符颜色和属性的控制信息(back<em>twinkle, back</em>r, back<em>g, back</em>b, front<em>light, front</em>r, front<em>g, front</em>b)</li>\n</ul>\n<h3 id=\"io\"><a href=\"#io\" aria-label=\"io permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I/O</h3>\n<p>调用 <code class=\"language language-text\">io_delay()</code> 函数: 对于一些老式总线的外部设备, 读写I/O端口的速度若过快就容易出现丢失数据的现象</p>\n<h2 id=\"实践\"><a href=\"#%E5%AE%9E%E8%B7%B5\" aria-label=\"实践 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实践</h2>\n<h3 id=\"工具\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-label=\"工具 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h3>\n<h4 id=\"bochs\"><a href=\"#bochs\" aria-label=\"bochs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bochs</h4>\n<h5 id=\"installation\"><a href=\"#installation\" aria-label=\"installation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language language-bash\"><code class=\"language language-bash\"><span class=\"token function\">wget</span> http://sourceforge.net/projects/bochs/files/bochs/2.5.1/bochs-2.5.1.tar.gz/download -O bochs.tar.gz\n<span class=\"token function\">tar</span> -xvfz bochs.tar.gz\n<span class=\"token function\">cd</span> bochs-2.5.1\n./configure --enable-debugger --enable-debugger-gui --enable-disasm --with-x --with-term\n<span class=\"token function\">make</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> ./bochs /usr/bin/bochs-dbg</code></pre></div>\n<h5 id=\"config\"><a href=\"#config\" aria-label=\"config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language language-bash\"><code class=\"language language-bash\"><span class=\"token comment\"># BIOS与VGA镜像</span>\nromimage: file<span class=\"token operator\">=</span>/usr/share/bochs/BIOS-bochs-latest\nvgaromimage: file<span class=\"token operator\">=</span>/usr/share/bochs/VGABIOS-lgpl-latest\n<span class=\"token comment\"># 内存大小</span>\nmegs: 128\n<span class=\"token comment\"># 软盘镜像</span>\nfloppya: 1_44<span class=\"token operator\">=</span>bin/kernel.images, status<span class=\"token operator\">=</span>inserted\n<span class=\"token comment\"># 硬盘镜像</span>\nata0-master: type<span class=\"token operator\">=</span>disk, path<span class=\"token operator\">=</span><span class=\"token string\">\"bin/rootfs.images\"</span>, mode<span class=\"token operator\">=</span>flat, cylinders<span class=\"token operator\">=</span>2, heads<span class=\"token operator\">=</span>16, spt<span class=\"token operator\">=</span>63\n<span class=\"token comment\"># 引导方式(软盘)</span>\nboot: a\n<span class=\"token comment\"># 日志输出</span>\nlog: .bochsout\npanic: action<span class=\"token operator\">=</span>ask\nerror: action<span class=\"token operator\">=</span>report\ninfo: action<span class=\"token operator\">=</span>report\ndebug: action<span class=\"token operator\">=</span>ignore\n<span class=\"token comment\"># 杂项</span>\nvga_update_interval: 300000\nkeyboard_serial_delay: 250\nkeyboard_paste_delay: 100000\nmouse: enabled<span class=\"token operator\">=</span>0\nprivate_colormap: enabled<span class=\"token operator\">=</span>0\nfullscreen: enabled<span class=\"token operator\">=</span>0\nscreenmode: name<span class=\"token operator\">=</span><span class=\"token string\">\"sample\"</span>\nkeyboard_mapping: enabled<span class=\"token operator\">=</span>0, map<span class=\"token operator\">=</span>\nkeyboard_type: at\n<span class=\"token comment\"># 符号表(调试用)</span>\ndebug_symbols: file<span class=\"token operator\">=</span>main.sym\n<span class=\"token comment\"># 键盘类型</span>\nkeyboard_type: at</code></pre></div>\n<h5 id=\"run\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language language-bash\"><code class=\"language language-bash\">$ bochs -q -f .bochsrc</code></pre></div>\n<ul>\n<li>b,vb,lb 分别为物理地址、虚拟地址、逻辑地址设置断点</li>\n<li>c 持续执行，直到遇到断点或者错误</li>\n<li>n 下一步执行</li>\n<li>step 单步执行</li>\n<li>r 显示当前寄存器的值</li>\n<li>sreg 显示当前的段寄存器的值</li>\n<li>info gdt, info idt, info tss, info tab 分别显示当前的GDT、IDT、TSS、页表信息</li>\n<li>print-stack 打印当前栈顶的值</li>\n<li>help 显示帮助</li>\n</ul>\n<h4 id=\"gnu-ld\"><a href=\"#gnu-ld\" aria-label=\"gnu ld permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GNU ld</h4>\n<div class=\"gatsby-highlight\" data-language=\"main.ld\"><pre class=\"language language-main.ld\"><code class=\"language language-main.ld\">ENTRY(kmain)\nSECTIONS {\n    __bios__ = 0xa0000; # 绑定BIOS保留内存的地址到__bios__\n    vgamem = 0xb8000; # 绑定vga缓冲区的地址到符号vgamem\n    .text 0x100000 : { # 内核二进制镜像中的.text段(Section)，从0x100000开始\n        __kbegin__ = .; # 内核镜像的开始地址\n        __code__ = .;\n        bin/entry.o(.text) bin/main.o(.text) *(.text); # 将bin/entry.o中的.text段安排到内核镜像的最前方\n        . = ALIGN(4096); # .text段按4kb对齐\n    }\n    .data : {\n        __data__ = .;\n        *(.rodata);\n        *(.data);\n        . = ALIGN(4096);\n    }\n    .bss : {\n        __bss__ = .;\n        *(.bss);\n        . = ALIGN(4096);\n    }\n    __kend__ = .; # 内核镜像的结束地址\n}</code></pre></div>","toc":"<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#operating-system-basic-notes\">Operating System Basic Notes</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#gcc-%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96\">GCC 内联汇编</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E6%80%A7\">操作系统的特性</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD\">操作系统的资源管理功能</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6\">处理机调度</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86\">存储器管理</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86\">设备管理</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">文件系统</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E5%8F%98\">操作系统的演变</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F\">批处理系统</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%88%86%E6%97%B6%E7%B3%BB%E7%BB%9F\">分时系统</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F\">实时系统</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA\">操作系统虚拟机</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3\">用户接口</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84\">操作系统的组织结构</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%B9%B6%E5%8F%91concurrent\">并发(Concurrent)</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%A8%8B%E5%BA%8F%E5%B9%B6%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9\">程序并发的特点</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%90%AF%E5%8A%A8\">启动</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#bios\">BIOS</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F\">启动顺序</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AF%84%E5%AD%98%E5%99%A8\">寄存器</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#bios-1\">BIOS</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#bootloader\">Bootloader</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%A0%87%E5%BF%97lab1toolssignc\">标志(lab1/tools/sign.c)</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\">基本功能</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%88%87%E6%8D%A2%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E5%90%AF%E5%8A%A8%E6%AE%B5%E6%9C%BA%E5%88%B6\">切换到保护模式, 启动段机制</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%BB%8E%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%8A%A0%E8%BD%BD-%E6%9F%90%E7%A7%8Dkernel-in-elf-%E6%A0%BC%E5%BC%8F%E7%9A%84-os-kernel%E5%9C%A8%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%B4%A7%E9%82%BB-mbr-%E8%87%B3%E5%86%85%E5%AD%98%E7%9A%84%E5%9B%BA%E5%AE%9A%E5%8C%BA%E5%9F%9F\">从硬盘上加载 某种(kernel in ELF) 格式的 os kernel(在硬盘中紧邻 MBR) 至内存的固定区域</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%B7%B3%E8%BD%AC%E5%88%B0-os-kernel-%E7%9A%84%E5%85%A5%E5%8F%A3%E7%82%B9entry-point-%E8%BD%AC%E7%A7%BB%E6%8E%A7%E5%88%B6%E6%9D%83%E8%87%B3-os\">跳转到 os kernel 的入口点(entry point), 转移控制权至 os</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%AE%B5%E6%9C%BA%E5%88%B6\">保护模式与段机制</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\">物理内存管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#bootloader-%E6%8E%A2%E6%B5%8B%E6%9C%BA%E5%99%A8%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83\">bootloader 探测机器内存分布</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1\">基本概念</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E6%9C%AC%E7%9B%AE%E6%A0%87\">基本目标</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\">基本管理方式</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9C%B0%E5%9D%80%E7%94%9F%E6%88%90\">地址生成</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9C%B0%E5%9D%80%E7%94%9F%E6%88%90%E6%97%B6%E6%9C%BA\">地址生成时机</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%BB%93%E5%90%88\">地址映射(软硬件结合)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9C%B0%E5%9D%80%E6%A3%80%E6%9F%A5%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%BB%93%E5%90%88\">地址检查(软硬件结合)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8Dmallocfree\">连续内存分配(malloc/free)</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87\">内存碎片</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\">动态分配策略</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%A2%8E%E7%89%87%E6%95%B4%E7%90%86%E7%AD%96%E7%95%A5\">碎片整理策略</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#ucore-%E5%AE%9E%E7%8E%B0\">ucore 实现</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%B4%A7%E5%87%91compaction\">紧凑(compaction)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%88%86%E5%8C%BA%E5%AF%B9%E6%8D%A2swapping-inout\">分区对换(swapping in/out)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#malloc-%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5\">malloc 实现策略</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%90%AF%E5%8F%91%E5%BC%8Fheuristic%E7%BC%96%E7%A8%8B\">启发式(Heuristic)编程</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9Fbuddy-system\">伙伴系统(Buddy System)</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%90%88%E5%B9%B6%E7%A9%BA%E9%97%B2%E5%9D%97\">合并空闲块</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">非连续内存分配</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%AE%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\">段式存储管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#gdt\">GDT</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\">页式存储管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80\">虚拟地址</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80\">物理地址</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%A1%B5%E8%A1%A8\">页表</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84\">页表结构</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\">性能问题</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#tlbtranslation-lookaside-buffer\">TLB(translation lookaside buffer)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\">多级页表</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%8F%8D%E7%BD%AE%E9%A1%B5%E8%A1%A8\">反置页表</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\">段页式存储管理</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%86%85%E5%AD%98%E7%9A%84%E7%89%B9%E6%9D%83%E7%BA%A7\">内存的特权级</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%89%B9%E6%9D%83%E7%BA%A7%E6%A3%80%E6%9F%A5\">特权级检查</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%89%B9%E6%9D%83%E7%BA%A7%E5%88%87%E6%8D%A2\">特权级切换</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#ring-0-to-ring-3\">ring 0 to ring 3</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#ring-3-to-ring-0-%E7%89%B9%E6%9D%83%E7%BA%A7%E6%8F%90%E5%8D%87\">ring 3 to ring 0 (特权级提升)</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#tsstask-state-segment\">TSS(Task State Segment)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\">虚拟内存管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#page-fault\">Page Fault</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2\">覆盖与交换</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%A6%86%E7%9B%96%E6%8A%80%E6%9C%AFoverlay\">覆盖技术(overlay)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AFswap\">交换技术(swap)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%99%9A%E6%8B%9F%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\">虚拟页式存储管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%A0%87%E5%BF%97%E4%BD%8D\">标志位</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\">页面置换算法</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%B1%80%E9%83%A8%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\">局部置换算法</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%9C%80%E8%BF%9C%E6%9C%AA%E7%94%A8%E7%AE%97%E6%B3%95least-recently-usedlru-algorithm\">最远未用算法(Least Recently Used/LRU Algorithm)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%97%B6%E9%92%9F%E7%AE%97%E6%B3%95clock-algorithm\">时钟算法(Clock Algorithm)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%9C%80%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95least-frequently-usedlfu-algorithm\">最不常用算法(Least Frequently Used/LFU Algorithm)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%85%A8%E5%B1%80%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\">全局置换算法</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%B7%A5%E4%BD%9C%E9%9B%86%E7%AE%97%E6%B3%95\">工作集算法</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%BC%BA%E9%A1%B5%E7%8E%87%E7%AE%97%E6%B3%95\">缺页率算法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E7%8E%B0\">实现</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%B8%AD%E6%96%ADinterrupt-service-routineinterrupt-quest\">中断(Interrupt Service Routine/Interrupt Quest)</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%B8%AD%E6%96%AD%E8%BF%9B%E5%85%A5\">中断进入</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%BF%9D%E6%8A%A4%E7%8E%B0%E5%9C%BA\">保护现场</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%B8%AD%E6%96%AD%E5%AE%9E%E7%8E%B0\">中断实现</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E7%8E%B0-1\">实现</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\">系统调用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E5%8D%95%E4%BD%8D\">进程(资源分配单位)</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%84%E7%90%86%E6%9C%BA%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E6%9D%83%E7%BA%A7\">处理机(进程)的特权级</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">进程状态/生命周期</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97process-control-block\">进程控制块(Process Control Block)</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1\">进程通信</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%BA%BF%E7%A8%8Bcpu-%E8%B0%83%E5%BA%A6%E5%8D%95%E4%BD%8D\">线程(CPU 调度单位)</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#idleproc0%E5%8F%B7%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B\">idleproc(0号内核线程)</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B\">内核线程与用户进程</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E7%8E%B0-2\">实现</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#process-context%E6%89%A7%E8%A1%8C%E7%8E%B0%E5%9C%BA\">process context(执行现场)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#do_fork-function\">&#x3C;code class=\"language language-text\">do_fork&#x3C;/code> function</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#do_execve-function\">&#x3C;code class=\"language language-text\">do_execve&#x3C;/code> function</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6-1\">处理机调度</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA\">调度时机</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%85%AD%E5%A4%A7%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA\">六大调度时机</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E7%AE%97%E6%B3%95\">调度策略/算法</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%AE%97%E6%B3%95%E7%9B%AE%E6%A0%87\">算法目标</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E7%AE%97%E6%B3%95first-come-first-servedfcfs\">先来先服务算法(First Come First Served/FCFS)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%9F%AD%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95shortest-process-nextshortest-remaining-time\">短进程优先算法(Shortest Process Next/Shortest Remaining Time)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%9C%80%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95highest-response-ratio-next\">最高响应比优先算法(Highest Response Ratio Next)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E7%AE%97%E6%B3%95round-robin\">时间片轮转算法(Round Robin)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95mq\">多级队列调度算法(MQ)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E7%AE%97%E6%B3%95mlfq\">多级反馈队列算法(MLFQ)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\">同步互斥</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E4%B8%B4%E7%95%8C%E5%8C%BA%E7%9A%84%E8%AE%BF%E9%97%AE%E5%8E%9F%E5%88%99\">临界区的访问原则</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%9F%BA%E4%BA%8E%E8%BD%AF%E4%BB%B6%E6%96%B9%E6%B3%95%E7%9A%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\">基于软件方法的同步互斥</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E9%AB%98%E7%BA%A7%E6%8A%BD%E8%B1%A1%E7%9A%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5\">高级抽象的同步互斥</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#locksemaphore\">lock/semaphore</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#monitor\">monitor</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%AD%BB%E9%94%81\">死锁</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E7%8E%B0-3\">实现</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#pv-%E6%93%8D%E4%BD%9C\">P/V 操作</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9A%84p%E6%93%8D%E4%BD%9C\">具体实现信号量的P操作</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9A%84v%E6%93%8D%E4%BD%9C\">具体实现信号量的V操作</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%AE%A1%E7%A8%8B\">管程</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#conditional-variable\">Conditional Variable</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-1\">文件系统</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90\">文件组成</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">文件系统基本数据结构</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E5%8D%B7%E6%8E%A7%E5%88%B6%E5%9D%97superblock\">文件卷控制块(superblock)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%9B%AE%E5%BD%95%E9%A1%B9dentry\">目录项(dentry)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%9D%97vnodeinode\">文件控制块(vnode/inode)</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\">文件描述符</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%A1%A8\">打开文件表</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D\">文件分配</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E7%A9%BA%E9%97%B2%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86\">空闲空间管理</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%86%97%E4%BD%99%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97redundant-array-of-inexpensive-disksraid\">冗余磁盘阵列(Redundant Array of Inexpensive Disks/RAID)</a></li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E7%8E%B0-4\">实现</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#mount\">Mount</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#index\">index</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#inode\">inode</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#device\">Device</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86-1\">设备管理</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#cgaega--chromatext-video-buffer\">CGA/EGA + Chromatext video buffer</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#io\">I/O</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%AE%9E%E8%B7%B5\">实践</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#%E5%B7%A5%E5%85%B7\">工具</a></p>\n<ul>\n<li>\n<p><a href=\"/react-blog/operatingSystemsBasicNotes/#bochs\">Bochs</a></p>\n<ul>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#installation\">Installation</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#config\">Config</a></li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#run\">Run</a></li>\n</ul>\n</li>\n<li><a href=\"/react-blog/operatingSystemsBasicNotes/#gnu-ld\">GNU ld</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","prevPost":{"slug":"/javascriptBasicNotes/","title":"JavaScript Basic Notes"},"nextPost":{"slug":"/linuxBasicNotes/","title":"Linux Basic Notes"}}}}